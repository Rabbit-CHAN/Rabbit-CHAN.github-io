{"meta":{"title":"Hu's space","subtitle":"让知识和感悟不那么孤单","description":"真要我说的话，人生是一次直至死亡的修行。","author":"修行の胡","url":"https://ihubx.top","root":"/"},"pages":[{"title":"","date":"2020-06-27T08:44:30.426Z","updated":"2020-06-27T08:44:30.426Z","comments":false,"path":"tags/index.html","permalink":"https://ihubx.top/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-06-27T08:45:15.044Z","updated":"2020-06-27T08:45:15.044Z","comments":false,"path":"categories/index.html","permalink":"https://ihubx.top/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2020-06-27T08:30:04.301Z","updated":"2020-06-27T08:30:04.301Z","comments":true,"path":"ckbxlog6a0002i0eb0ewgas2t.html","link":"","permalink":"https://ihubx.top/ckbxlog6a0002i0eb0ewgas2t.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"VMware Workstation pro无法在Windows上运行，检查可在Windows上运行的此应用的更新版本","slug":"yuque-ng2nmz","date":"2019-10-28T02:16:48.000Z","updated":"2020-06-27T11:09:59.875Z","comments":true,"path":"ckbxlog6x000ci0eb3fs2e2yw.html","link":"","permalink":"https://ihubx.top/ckbxlog6x000ci0eb3fs2e2yw.html","excerpt":"///VMware Workstation pro 无法在 Windows 上运行，检查可在 Windows 上运行的此应用的更新版本///如何解决？","text":"///VMware Workstation pro 无法在 Windows 上运行，检查可在 Windows 上运行的此应用的更新版本///如何解决？ 如果您无法正常查看本文的图片，请访问我的语雀空间查看备份文档：语雀|VMware Workstation pro 无法在 Windows 上运行，检查可在 Windows 上运行的此应用的更新版本 image.png Solution1: 卸载 Windows 更新卸载图中的两个更新后重启电脑，VMware 就能正常使用了~ image.png image.png 必要的话，你还可以参考这篇文章停止 Windows 自动更新：如何停止 Windows 10 更新 推荐阅读VMware Workstation Pro 无法在 Windows 上运行的解决方法YouTube|Fix VMware Workstation Pro 14.1.7/12.5.9 not starting on Windows 10 1903","categories":[{"name":"IT技能","slug":"IT技能","permalink":"https://ihubx.top/categories/IT%E6%8A%80%E8%83%BD/"}],"tags":[{"name":"Win10","slug":"Win10","permalink":"https://ihubx.top/tags/Win10/"}]},{"title":"优雅的工具和方法","slug":"yuque-to40mm","date":"2019-10-08T03:00:09.000Z","updated":"2020-06-27T11:09:59.891Z","comments":true,"path":"ckbxlog6y000fi0ebe75j8izt.html","link":"","permalink":"https://ihubx.top/ckbxlog6y000fi0ebe75j8izt.html","excerpt":"记录一些“优雅”工具或方法。 始于 2019.10.08","text":"记录一些“优雅”工具或方法。 始于 2019.10.08 如果您无法正常查看本文的图片，请访问我的语雀空间查看备份文档：语雀|优雅的工具和方法 图片压缩兔费在线压缩 PNG/JPG 图像：https://www.websiteplanet.com/zh-hans/webtools/imagecompressor/ image.png 代码高亮Command NotFound | 代码自动高亮：https://commandnotfound.cn/tools/highlighter 支持多种开发语言的自动 Syntax Highlight：C, Java, Kotlin, Python, Bash, SQL, HTML, XML, CSS, JavaScript, Rust, Perl, Apollo, Basic, Clojure, Makefile, CSS, Dart, Erlang, Go, Haskell, Lasso, Lisp, Scheme, LLVM, Logtalk, Lua, MATLAB, MLs: F#, Ocaml,SML, Mumps, Nemerle, Pascal（Delphi）, Protocol buffers, R, S, RD, Rust, Scala, SQL, Swift, TCL, LaTeX, Visual Basic, VHDL, Wiki, XQ, YAML .. Syntax Highlight image.png","categories":[{"name":"效率","slug":"效率","permalink":"https://ihubx.top/categories/%E6%95%88%E7%8E%87/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://ihubx.top/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"台式机前面板插入耳机无音频输出","slug":"yuque-oe2euo","date":"2019-09-15T08:23:55.000Z","updated":"2020-06-27T11:09:59.937Z","comments":true,"path":"ckbxlog6x000di0eb0jqj8m5u.html","link":"","permalink":"https://ihubx.top/ckbxlog6x000di0eb0jqj8m5u.html","excerpt":"使用台式机的你想听听主机发出的声音，但当你将耳机插入离你最近的前面板时，却啥也听不到…Windows10 很贴心地告诉你原因：“未插入扬声器或耳机”…..What’s wrong?!","text":"使用台式机的你想听听主机发出的声音，但当你将耳机插入离你最近的前面板时，却啥也听不到…Windows10 很贴心地告诉你原因：“未插入扬声器或耳机”…..What’s wrong?! 如果您无法正常查看本文的图片，请访问我的语雀空间查看备份文档：语雀|台式机前面板插入耳机无音频输出 问题描述使用台式机的你想听听主机发出的声音，但当你将耳机插入离你最近的前面板时，却啥也听不到…Windows10 很贴心地告诉你原因：“未插入扬声器或耳机”…..What’s wrong?! image.png image.png 解决方法Step1-观察声卡是否正常工作先用驱动精灵检测是否需要安装声卡或声卡是否正常工作，因为驱动精灵很可能带一大堆捆绑软件，这推荐使用绿色版（即免安装版）【下载链接|驱动精灵绿色版.zip】 我这里的例子是安装了 Realtek High Definition Audio（声卡）。重启电脑，可以在后台看到声卡管理器（见下图），点击进入管理器界面即可以对前面板、后面板的音频输入输出进行配置了。如果你完成 Step1 后，在前面板插入耳机仍不能听到声音，则进行 Step2。 image.png image.png Step2-在控制面版中观察设备是否被禁用下图是播放设备正常工作的一个例子，如果你发现你的设备被禁用了，则重新启用。 image.png 另外，将 Realtek High Definition Audio（声卡）的“插孔设置”设置成“禁用前面板插孔检测”或许也能解决这个问题。下图是一个具体的例子： image.png 如果你完成 Step1 和 Step2 都没有成功，则进入 Step3，检查主机的连接线是否插好。 Step3-检查主机的连接线是否插好进行到这一步的话，你就需要用螺丝刀拆开你的主机了，根据主机的主板信息检查主机的前面板音频的连接线是否插好。下图是一个插好的例子： image.png 如果你完成 Step1、Step2、Step3 都没有成功，一般情况下，你还有两个方式找出原因： 判断主板本身是否有问题 执行我在解决问题时发现的骚气解决方法 Step+ Step+骚气解决方法如果你坚信你的主板音频部分没有任何问题，不妨试试这个 Step+骚气解决方法。拿一个确定能正常听到声音的耳机，插到主机后面板的音频输出口（参见下图），观察**Realtek High Definition Audio（声卡）是否检测到耳机插入！* 如果能检测到，此时你再将耳机插到前面板，会发现也能检测到，此时你已经可以在前面板听到声音了，*问题解决了！！！\\\\ image.png 事后想了一下，这个方法之所以奏效，可能是因为插入主机后面板音频输出口时，刺激了声卡对耳机插入的检测。大致是这样，再深入想就超出了我的知识范围了，这里不过多引申了，希望能帮到你！ 推荐阅读百度知道|电脑机箱前面板的耳机插孔不能用百度知道|微星主板前置音频如何接线百度文库|主板前置音频接口的连接说明微星 K9A2VM V2 主板前置面板音频接口接法","categories":[{"name":"IT技能","slug":"IT技能","permalink":"https://ihubx.top/categories/IT%E6%8A%80%E8%83%BD/"}],"tags":[{"name":"Win10","slug":"Win10","permalink":"https://ihubx.top/tags/Win10/"},{"name":"台式机","slug":"台式机","permalink":"https://ihubx.top/tags/%E5%8F%B0%E5%BC%8F%E6%9C%BA/"}]},{"title":"【持续更新】文本处理相关知识整理","slug":"yuque-qfdfyl","date":"2019-08-13T12:37:50.000Z","updated":"2020-06-27T11:09:59.963Z","comments":true,"path":"ckbxlog6z000gi0eb1wts71q5.html","link":"","permalink":"https://ihubx.top/ckbxlog6z000gi0eb1wts71q5.html","excerpt":"tags: [txt, Notepad++]categories: [文本处理]copyright: true 这里整理了文本处理相关的知识，欢迎来瞅瞅~","text":"tags: [txt, Notepad++]categories: [文本处理]copyright: true 这里整理了文本处理相关的知识，欢迎来瞅瞅~ 文本中的 CR LF 是什么？copy 一段有换行的文字到 Notepad++里，之后 视图&gt;&gt;显示符号&gt;&gt;显示所有字符 看到文本中出现了 CR LF 的字样。这里的CR LF是什么东东呢？ image.png Google 一下，很快就获得了解答： CRLF, LF 是用来表示文本换行的方式。CR(Carriage Return) 代表回车，对应字符 ‘\\r’；LF(Line Feed) 代表换行，对应字符 ‘\\n’。由于历史原因，不同的操作系统文本使用的换行符各不相同。主流的操作系统一般使用 CRLF 或者 LF 作为其文本的换行符。其中，Windows 系统使用的是 CRLF, Unix 系统(包括 Linux, MacOS 近些年的版本) 使用的是 LF。ref—作者：于晓飞 93 链接：https://www.jianshu.com/p/ec9564fe1c2b 看到这里其实就已经可以理解了。如果你有兴趣进一步了解的话，不妨再读读这篇文章：知无涯之回车换行的故事 Nodepad++使用正则表达式给 srt 字幕提纯首先根据 文本中的 CR LF 是什么？ 查看换行符的形式 image.png 可见是 CR LF ，所以正则表达式应该是\\r\\d为了去掉时间信息的文本，我们需要语句：\\d*\\r\\n\\d\\d:\\d\\d:\\d\\d,\\d\\d\\d --&gt; \\d\\d:\\d\\d:\\d\\d,\\d\\d\\d``\\r\\n 替换成 什么也没有接着为了把中间的空行去掉，要用语句\\r\\n\\r\\n 替换成 什么也没有 \\r\\n （上述过程可以录制宏） image.png emmm 由于是繁体字幕，所以还需要繁体转简体在线繁体字转换工具 补充阅读：正则表达式（RegEx）——快速参考可能是最好的正则表达式的教程笔记了吧… - 掘金Nodepad++小技巧：中英双语字幕转换为英文字幕","categories":[],"tags":[]},{"title":"hexo-next 主题优化","slug":"yuque-qioggy","date":"2019-08-11T06:48:03.000Z","updated":"2020-06-27T11:09:59.986Z","comments":true,"path":"ckbxlog70000ji0eb4f1v5nhg.html","link":"","permalink":"https://ihubx.top/ckbxlog70000ji0eb4f1v5nhg.html","excerpt":"这里收集了一些 hexo-next 主题优化的方法","text":"这里收集了一些 hexo-next 主题优化的方法 文章显示摘要图片重点参考了：打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化，在此感谢原作者的分享！ 先在主题配置中找到下面的代码，并修改： 123456789101112# Automatically excerpt description in homepage as preamble text.# 将每篇文章 Front-matter 里 description 的文字作为页面显示的文章摘要excerpt_description: false# Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.# 按字数自动加入 [Read More]，不建议！# 建议在文章中加入 &lt;!-- more --&gt;# 自定义 [Read More] 按钮之前要显示的内容！auto_excerpt: enable: false length: 150 之后在 ~/blog/themes/next/layout/_macro/post.swig 特定位置添加下面的代码： image.png 12345&#123;% if post.image %&#125;&lt;div class=\"out-img-topic\"&gt; &lt;img src=&#123;&#123; post.image &#125;&#125; class=\"img-topic\" /&gt; &lt;/div&gt; &#123;% endif %&#125; 为了防止有的图片宽度不够导致风格不够统一，页面不美观，需要在~/blog/themes/next/source/css/_custom/custom.styl中加入： 1234// 自定义的文章摘要图片样式img.img-topic &#123; width: 100%;&#125; 最后编辑有这需求的相关文章时，在Front-matter（文件最上方以---分隔的区域）加上一行： image: url 即可。最终得到的效果如下，emmmm 其实还是挺丑的…（不管那么多了，能用就行！ image.png 让页脚的心跳动起来重点参考了：打造个性超赞博客 Hexo + NexT + GitHub Pages 的超深度优化，在此感谢原作者的分享！ 首先编辑主题配置文件（~/themes/next/_config.yml），将icon: user 改为 icon: heart 然后编辑页脚样式（~/themes/next/layout/_partials/footer.swig），将其中的&lt;span class=&quot;with-love&quot;&gt; 改为 &lt;span class=&quot;with-love&quot; id=&quot;heart&quot;&gt; 接着编辑~/themes/next/source/css/_custom/custom.styl，加入： 12345678910111213// 自定义页脚跳动的心样式@keyframes heartAnimate &#123; 0%,100%&#123;transform:scale(1);&#125; 10%,30%&#123;transform:scale(0.9);&#125; 20%,40%,60%,80%&#123;transform:scale(1.1);&#125; 50%,70%&#123;transform:scale(1.1);&#125;&#125;#heart &#123; animation: heartAnimate 1.33s ease-in-out infinite;&#125;.with-love &#123; color: rgb(255, 113, 168);&#125; 给博客添加豆瓣读书/电影/游戏页面https://bestzuo.cn/posts/blog-establish.html 给博客添加鼠标点击特效https://bestzuo.cn/posts/446056512.html 添加 valine 评论系统https://valine.js.org/quickstart.html https://io-oi.me/tech/hexo-next-optimization.html#contents:点击侧栏头像回到博客首页 在 D:\\BLOG\\blog\\themes\\NextNewSanarous\\layout_macro\\carousel.swig image.png http://mashirosorata.vicp.io/HEXO-NEXT 主题个性化配置.html","categories":[{"name":"blog","slug":"blog","permalink":"https://ihubx.top/categories/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ihubx.top/tags/hexo/"}]},{"title":"语雀+hexo自动部署","slug":"yuque-yuquehexo","date":"2019-08-11T02:14:44.000Z","updated":"2020-06-27T11:10:00.044Z","comments":true,"path":"ckbxlog71000ni0eb5ybif9ps.html","link":"","permalink":"https://ihubx.top/ckbxlog71000ni0eb5ybif9ps.html","excerpt":"语雀+hexo 自动部署","text":"语雀+hexo 自动部署 0 心路历程本文写于 2019.08.11 10:14 2019 年年初，我搭建好了 hexo+Github Page 的静态博客，随后我接触了语雀。从使用体验上讲，在语雀上写文章确实比纯写 markdown 文章要方便得多，后来就一直在用语雀写作或者做笔记了（emm 目前大部分文章仍处于私密状态）。从大体上讲，我创建博客的初衷，是在网络上分享自己的知识总结，重在内容而非格式，所以，若要非前端背景的我兼顾语雀和 hexo 的文章发布，实在很费精力。站在这样的出发点上，自己就渐渐没怎么管 hexo 博客了。 可是偶然看到这篇文章—— Blog|使用语雀来编辑博客文章 ，便启发我将两者结合起来，最大化地综合两者的优势。Blog|使用语雀来编辑博客文章提到的是利用库 yuque-hexo 把语雀中的文章，转换成 Hexo 能够识别的 md 文件，然后部署到个人博客里。既然发现这么一个方便的东西，我自然忍不住要拿来用了。之后看到更加自动化的方式 Blog|Hexo 博客终极玩法：云端写作，自动部署 心里就更是欣喜了。由衷感谢这些 dalao 们探索和分享！ 考虑到精力和基础等因素，我们由易到难，先看看单纯使用yuque-hexo 的效果。 1 yuque-hexo 配置参考项目地址：https://github.com/x-cold/yuque-hexo 1.1 安装进入本地的博客项目路径，打开 Git bash,输入 $ npm i -g yuque-hexo 安装yuque-hexo如果安装较慢，可以[临时]通过 config 配置指向国内镜像源(ref: 给电脑换源 npm 国内镜像 cnpm)： 123# 指向国内镜像源 https://npm.taobao.org$ npm config set registry http://registry.npm.taobao.org$ npm i -g yuque-hexo 示意图如下， /d/BLOG/blog 即我的博客项目路径： image.png 1.2 配置打开博客项目路径中的 D:\\BLOG\\blog\\package.json 新增下面的代码： 1234567891011\"yuqueConfig\": &#123; \"postPath\": \"source/_posts/yuque\", \"cachePath\": \"yuque.json\", \"mdNameFormat\": \"title\", \"adapter\": \"hexo\", \"concurrency\": 5, \"baseUrl\": \"https://www.yuque.com/api/v2\", \"login\": \"oneforall\", \"repo\": \"MyBlog\", \"onlyPublished\": false &#125;, 参数名 含义 默认值 postPath 文档同步后生成的路径 source/_posts/yuque cachePath 文档下载缓存文件 yuque.json mdNameFormat 文件名命名方式 (title / slug) title adapter 文档生成格式 (hexo/markdown) hexo concurrency 下载文章并发数 5 baseUrl 语雀 API 地址 按默认即可 login 语雀 login (group), 也称为个人路径 oneforall repo 语雀仓库短名称，也称为语雀知识库路径 MyBlog onlyPublished 只展示已经发布的文章 false 1.2+ 私有知识库配置PS. 如果你的知识库是私有的，则需要在package.json注入环境变量 YUQUE_TOKEN=xxx 。在语雀上点击 个人头像 -&gt; 账户设置 -&gt; Token 即可获取。 操作演示如下： image.png 获取 Token 后，像之前操作的那样，打开博客项目路径中的 D:\\BLOG\\blog\\package.json 新增配置代码（补充 token）： 1234567891011121314\"yuqueConfig\": &#123; \"postPath\": \"source/_posts/yuque\", \"cachePath\": \"yuque.json\", \"mdNameFormat\": \"title\", \"adapter\": \"hexo\", \"concurrency\": 5, \"baseUrl\": \"https://www.yuque.com/api/v2\", \"login\": \"oneforall\", \"repo\": \"MyBlog\", \"token\":\"YourToken\", \"onlyPublished\": false &#125;, 1.3 部署(需手动)完成上面的操作以后，我们就已经可以拉取语雀的文章转至 hexo 部署了。 1.3.1 同步进入本地的博客项目路径，Shift + 右键 打开 Powershell 窗口，输入命令 yuque-hexo sync 将语雀的文章同步到本地。【注】我这里用 Powershell 有点绕弯了，直接用 Git Bash 就行。 同步成功时，你会看到下面的结果： image.png PS.如果你在 1.2 配置中调取的知识库是私有的，但未在package.json注入环境变量 YUQUE_TOKEN=xxx 那么会收到下面的 error: image.png 此时你需要按照1.2+私有知识库配置的方式补充环境 Token. 1.3.2 本地预览就和 hexo 发布文章的操作一样，在 Git Bash 中输入 hexo g &amp;&amp; hexo s 1.3.3 部署在 Git Bash 中输入 hexo d 1.3+ Npm Scripts?https://github.com/x-cold/yuque-hexo 提到了 Npm Scripts，按操作应该是打开博客项目路径中的 D:\\BLOG\\blog\\package.json 新增下面的代码，可以使用自定义的精简命令进行文章同步、预览、部署等操作。 12345\"scripts\": &#123; \"dev\": \"npm run sync &amp;&amp; hexo s\", \"sync\": \"yuque-hexo sync\", \"clean:yuque\": \"yuque-hexo clean\"&#125;, 但我现在还不清楚用来干嘛的，一开始以为可以精简命令，但试了一下没有用…原谅我对package.json暂时了解不多，一直在照葫芦画瓢….. image.png 2 实现自动部署待续 待读：Blog|Hexo 博客终极玩法：云端写作，自动部署https://joashzhao.github.io/blog/2019/07/16/yuque/语雀自动同步 HEXO 机器人——搭建细节/https://segmentfault.com/a/1190000019214202","categories":[{"name":"blog","slug":"blog","permalink":"https://ihubx.top/categories/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ihubx.top/tags/hexo/"},{"name":"语雀","slug":"语雀","permalink":"https://ihubx.top/tags/%E8%AF%AD%E9%9B%80/"}]},{"title":"win10端口被占用解决方法","slug":"win10端口被占用解决方法","date":"2019-02-23T06:46:00.000Z","updated":"2019-03-15T07:00:54.597Z","comments":true,"path":"ckbxlog660000i0eb22n6d1z7.html","link":"","permalink":"https://ihubx.top/ckbxlog660000i0eb22n6d1z7.html","excerpt":"","text":"写作业的时候，在后台运行的shadowsocks突然弹出“Shadowsocks 错误：端口已被占用 2000”的报错。 自己是头一次遇到这类问题，下面通过图片演示解决方案。 Step1 在命令提示符中查看对应端口的运行情况首先进入命令提示符，如图所示输入 netstat -aon|findstr&quot;2000&quot;，查看端口2000被哪个PID所占用，结果如下图所示。可见，端口2000所对应的PID为7420. 之后，输入tasklist |findstr&quot;7420&quot;，找到PID为7420所对应的进程名字。 Step2-1 直接在命令提示符中杀掉进程在Step1的基础上，继续在命令提示符中输入taskkill -pid “7420” -f强制关闭PID=7420的进程。 Step2-2 在任务管理器中杀掉进程尽管Step2-1已经足够简单，但这里依然演示一下如何在任务管理器中杀掉进程。如下图所示，打开任务管理器后，在“详细信息”一栏中，根据PID的数值找到对应的进行，之后鼠标右键结束任务即可。","categories":[{"name":"IT技能","slug":"IT技能","permalink":"https://ihubx.top/categories/IT%E6%8A%80%E8%83%BD/"}],"tags":[{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://ihubx.top/tags/shadowsocks/"},{"name":"win10","slug":"win10","permalink":"https://ihubx.top/tags/win10/"},{"name":"cmd","slug":"cmd","permalink":"https://ihubx.top/tags/cmd/"}]}],"categories":[{"name":"IT技能","slug":"IT技能","permalink":"https://ihubx.top/categories/IT%E6%8A%80%E8%83%BD/"},{"name":"效率","slug":"效率","permalink":"https://ihubx.top/categories/%E6%95%88%E7%8E%87/"},{"name":"blog","slug":"blog","permalink":"https://ihubx.top/categories/blog/"}],"tags":[{"name":"Win10","slug":"Win10","permalink":"https://ihubx.top/tags/Win10/"},{"name":"工具","slug":"工具","permalink":"https://ihubx.top/tags/%E5%B7%A5%E5%85%B7/"},{"name":"台式机","slug":"台式机","permalink":"https://ihubx.top/tags/%E5%8F%B0%E5%BC%8F%E6%9C%BA/"},{"name":"hexo","slug":"hexo","permalink":"https://ihubx.top/tags/hexo/"},{"name":"语雀","slug":"语雀","permalink":"https://ihubx.top/tags/%E8%AF%AD%E9%9B%80/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://ihubx.top/tags/shadowsocks/"},{"name":"win10","slug":"win10","permalink":"https://ihubx.top/tags/win10/"},{"name":"cmd","slug":"cmd","permalink":"https://ihubx.top/tags/cmd/"}]}